model name = 'EPS_PA' model_owner = root | fields DMINSTTNM as 수요기관  | where 수요기관 is not null   | distinct 수요기관  |case when 수요기관 = '전체 수요기관' then 0 otherwise 1 as nb | sort +nb, 수요기관
model name = '진주시청_교통량' model_owner = root
model name = 'EPS_COMPANY' model_owner = root | fields name as 수주업체, bizno as 사업자등록번호  | where 수주업체 is not null   | distinct 수주업체, 사업자등록번호   | sort +수주업체
model name = 'KOTRA_VOC_YRWK_DIFF' model_owner = kotravoc | DISTINCT TAKEYEAR | SORT +TAKEYEAR
model name = 'KOTRA_VOC_HJ_CNT' model_owner = kotravoc | distinct TAKEYEAR, AREA_KOR | sort +TAKEYEAR
model name = 'KOTRA_VOC_VOCCLA_SAMPLE' model_owner = kotravoc | distinct TAKEYEAR, VOCCLA4_KOR, VOCCLA5_KOR | sort +TAKEYEAR
model name = 'KOTRA_VOC_YRWK_DIFF' model_owner = kotravoc | WHERE TAKEYEAR = '2019' | fields TAKEYEAR AS 년도, WEEK_COUNT AS 주차, RECORD_CNT AS 합계, DIFF_PRCNT AS 증감율
model name = 'KOTRA_VOC_VOCCLA_SAMPLE' model_owner = kotravoc | where TAKEYEAR = '2015' and  VOCCLA4_KOR = '중소기업수출지원(상담)'  | stats count(*) AS '발생건수' by TAKEYEAR,  VOCCLA4_KOR,VOCCLA5_KOR | fields TAKEYEAR AS 년도, VOCCLA4_KOR AS 세부상담분류1, VOCCLA5_KOR AS 세부상담분류2, 발생건수
model name = 'KOTRA_VOC_VOCCLA_SAMPLE' model_owner = kotravoc | where TAKEYEAR ='2015' and  VOCCLA4_KOR ='중소기업수출지원(상담)'| pivot count(VOCCLA5_KOR) SPLITROW TAKEYEAR SPLITCOL VOCCLA5_KOR
model name = 'KOTRA_VOC_VOCCLA_SAMPLE' model_owner = kotravoc | distinct TAKEYEAR
model name = '자율주행 데이터 리스트' model_owner = diamonde
model name = 'ANO_NODE_ANO' model_owner = root  | count
model name = 'ANO_NODE_ANO' model_owner = root
model name = 'EPS_PA' model_owner = root
model name = 'EPS_PA' model_owner = root  | count
model name = '서초구청_미세먼지' model_owner = babomon
model name = 'I_전기 자동차 충전소 현황 (상태)' model_owner = skysora | sql "select date_format( lastModified , 'yyyy-MM-dd HH:mm:ss') as newLastModified from angora" | fields newLastModified  | top 1 -newLastModified
model name = 'I_전기 자동차 충전소 현황 (위치)' model_owner = skysora stat in (1,2,3,4,5,9) | distinct stat | sort stat | case when stat=1 then '통신이상' when stat=2 then '충전대기' when stat=3 then '충전중' when stat=4 then '운영중지' when stat=5 then '점검중' when stat=9 then '상태미확인'  otherwise '확인불가' as 충전기상태
model name = 'I_전기 자동차 충전소 현황 (위치)' model_owner = skysora parkingFree not in (0, 1) | distinct parkingFree | case when parkingFree='Y' then '무료' when parkingFree='N' then '유료' when parkingFree='S' then '현장 결제'
model name = 'I_전기 자동차 충전소 현황 (위치)' model_owner = skysora | fields chgerType | case when chgerType=1 then 'DC차데모' when chgerType=2 then 'AC완속' when chgerType=3 then 'DC차데모+AC3상' when chgerType=4 then 'DC콤보' when chgerType=5 then 'DC차데모+DC콤보' when chgerType=6 then 'DC차데모+AC3상+DC콤보' otherwise 'AC3상' as  chgerName | sort chgerType
model name = 'I_전기 자동차 충전소 현황 (위치)' model_owner = skysora spatial_coordinates = 'POLYGON((39.19820534889482 124.04663085937501, 39.19820534889482 132.46215820312503, 32.565333160841035 132.46215820312503, 32.565333160841035 124.04663085937501, 39.19820534889482 124.04663085937501))' map_level = 7 | where 1=1                         | rename STATNM `충전소 이름` | rename ADDR `충전소 주소` | rename LAT `위도` | rename LNG `경도` | rename USETIME `이용 가능 시간` | rename BUSINM `관리 기관(업체 이름)` | rename BUSICALL `기관(업체) 연락처` | rename STATUPDDT `정보 갱신 일시`
model name = 'EX_TEST' model_owner = root | concat "POINT(",LONGITUDE," ",LATITUDE, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.36389160156251 35.42353163203213,125.36389160156251 37.91840783999542,131.17785644531253 37.91840783999542,131.17785644531253 35.42353163203213,125.36389160156251 35.42353163203213)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.765747 36.292991,126.765747 37.219393,128.380737 37.219393,128.380737 36.292991,126.765747 36.292991)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EX_FACLT' model_owner = root | concat "POINT(",LONGITUDE_V2," ",LATITUDE_V2, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.36389160156251 35.42353163203213,125.36389160156251 37.91840783999542,131.17785644531253 37.91840783999542,131.17785644531253 35.42353163203213,125.36389160156251 35.42353163203213)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.765747 36.292991,126.765747 37.219393,128.380737 37.219393,128.380737 36.292991,126.765747 36.292991)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'cfd_iris_example' model_owner = root
model name = 'cfd_iris_example' model_owner = root  | count
model name = '프로세스처리이력' model_owner = diamonde PS_GROUP_PARENT_NAME='적재' | fields +INSERT_TIME, PS_NAME, PS_GROUP_NAME, IN_FILE_NAME, IN_FILE_SIZE, IN_FILE_ROW_CNT, OUT_FILE_NAME, OUT_FILE_SIZE, OUT_FILE_ROW_CNT, IRIS_TABLE_NAME, FAIL_REASON | sort - INSERT_TIME
model name = '프로세스처리이력' model_owner = diamonde | adv bar count(*) SPLITROW SRC_FILE_NAME FILTER PS_GROUP_PARENT_NAME = '적재' AND PS_SUCCESS_FLAG = 'S' COLSIZE 500
model name = '프로세스처리이력' model_owner = diamonde | adv pie sum(IN_FILE_SIZE) SPLITROW SRC_FILE_NAME FILTER PS_SUCCESS_FLAG = 'S' AND PS_GROUP_PARENT_NAME = '적재' COLSIZE 500
model name = '프로세스처리이력' model_owner = diamonde | adv line sum(IN_FILE_SIZE) SPLITROW 'date_group("INSERT_TIME", "10M")' SPLITCOL SRC_FILE_NAME FILTER PS_SUCCESS_FLAG = 'S' AND PS_GROUP_PARENT_NAME = '적재' COLSIZE 500
model name = 'DASH0130' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_INDEX, FILE_NAME, PS_MANU_TYPE, FILE_SIZE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''"
model name = 'DASH0130' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_INDEX, DATA_TYPE, FILE_NAME, FILE_SIZE, PS_NAME, PS_TIME, PS_SUCCESS_FLAG from angora"
model name = 'DASH0130' model_owner = gb7978 |sql "select distinct UPDATE_DATETIME, FILE_INDEX, FILE_NAME, FILE_SIZE/1000/1000/1000 as FILE_SIZE_GB, DATA_TYPE from angora where PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot sum(FILE_SIZE_GB) SPLITROW 'date_group("UPDATE_DATETIME", "1d")'
model name = 'DASH0130' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_NAME, PS_MANU_TYPE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot count(*) SPLITROW PS_MANU_TYPE COLSIZE 500
model name = 'DASH0130' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_NAME, PS_MANU_TYPE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot countDistinct(PS_MANU_TYPE) SPLITROW 'date_group("UPDATE_DATETIME", "1d")' SPLITCOL PS_MANU_TYPE COLSIZE 500 | sort +UPDATE_DATETIME
model name = 'DASH0129' model_owner = gb7978 |sql "select distinct UPDATE_DATETIME, FILE_INDEX, FILE_NAME, FILE_SIZE/1000/1000/1000 as FILE_SIZE_GB, DATA_TYPE from angora where PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot sum(FILE_SIZE_GB) SPLITROW 'date_group("UPDATE_DATETIME", "1d")'|sort +UPDATE_DATETIME
model name = 'DASH0129' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_NAME, PS_MANU_TYPE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot count(*) SPLITROW PS_MANU_TYPE COLSIZE 500
model name = 'DASH0129' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_INDEX, FILE_NAME, PS_MANU_TYPE, FILE_SIZE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''"
model name = 'DASH0129' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_INDEX, DATA_TYPE, FILE_NAME, FILE_SIZE, PS_NAME, PS_TIME, PS_SUCCESS_FLAG from angora"
model name = 'DASH0129' model_owner = gb7978 |sql "select UPDATE_DATETIME, FILE_NAME, PS_MANU_TYPE from angora where DATA_TYPE='M' and PS_NAME='5' and PS_SUCCESS_FLAG='S' and not FILE_NAME=''" | pivot countDistinct(PS_MANU_TYPE) SPLITROW 'date_group("UPDATE_DATETIME", "1d")' SPLITCOL PS_MANU_TYPE COLSIZE 500 | sort +UPDATE_DATETIME
model name = '프로세스처리이력' model_owner = diamonde | adv pie count(*) SPLITROW PS_SUCCESS_FLAG FILTER PS_GROUP_NAME = '실시간' COLSIZE 500
model name = '프로세스처리이력' model_owner = diamonde | adv line count(*) SPLITROW 'date_group("INSERT_TIME", "10M")' SPLITCOL SRC_FILE_NAME FILTER PS_SUCCESS_FLAG = 'S' AND PS_GROUP_PARENT_NAME = '수집' COLSIZE 500
model name = '프로세스처리이력' model_owner = diamonde | adv pie count(*) SPLITROW PS_SUCCESS_FLAG FILTER PS_GROUP_NAME = '주기적' COLSIZE 500
model name = '프로세스처리이력' model_owner = diamonde PS_GROUP_NAME='실시간'|where PS_GROUP_PARENT_NAME='수집' | fields +INSERT_TIME, PS_SECTION, PS_NAME, SRC_FILE_NAME, SRC_FILE_ROW_CNT,IN_FILE_SIZE, FAIL_REASON | sort - INSERT_TIME
model name = '프로세스처리이력' model_owner = diamonde PS_GROUP_NAME='주기적'|where PS_GROUP_PARENT_NAME='수집' | fields +INSERT_TIME, PS_SECTION, PS_NAME, SRC_FILE_NAME, SRC_FILE_ROW_CNT,IN_FILE_SIZE, FAIL_REASON | sort - INSERT_TIME
model name = '8 15 서울도심 집회 관련 수도권 대중교통 이용 증감률' model_owner = yang | sql "select case       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '0' then dd || '(일)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '1' then dd || '(월)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '2' then dd || '(화)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '3' then dd || '(수)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '4' then dd || '(목)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '5' then dd || '(금)'       when dayofweek('2020-08-' || lpad(DD,2,'0')) = '6' then dd || '(토)'       end as 일,        percent as 대중교통_이용_증감률, covid as 코로나19_확진자_수 from    angora"
model name = '연도별 월별 하루 평균 대중교통 이용량' model_owner = yang | sql "SELECT MON, Y2019 as 2019년, Y2020 as 2020년 FROM ANGORA"
model name = '2020년 12월 수도권 대중교통 이용 증감률' model_owner = yang | sql "select case       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '0' then dd || '(일)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '1' then dd || '(월)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '2' then dd || '(화)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '3' then dd || '(수)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '4' then dd || '(목)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '5' then dd || '(금)'       when dayofweek('2020-12-' || lpad(DD,2,'0')) = '6' then dd || '(토)'       end as 일,        percent as 대중교통_이용_증감률, covid as 코로나19_확진자_수 from    angora"
model name = '전국 권역별 하루 평균 통행량 변화' model_owner = yang | sql "SELECT CASE WHEN LOC='부산울산권' THEN '부산ㆍ울산권' ELSE LOC END as 지역, Y2019/1000 as 2019년, Y2020/1000 as 2020년 FROM ANGORA" | round 0
model name = '코로나19 예방접종센터' model_owner = yang
model name = '2020년 12월 수도권 대중교통 이용량' model_owner = yang | where loc='서울' | stats sum(use) as 이용량 by DD | sort DD
model name = 'TEST_NO_PARTITION_HOST' model_owner = demo |  sampling count 10
