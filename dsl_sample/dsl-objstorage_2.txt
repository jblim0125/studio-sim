model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo  | count
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  > ='201901' YYYYMMDD  < '202001'  )  as q on 행정구명 =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지             by 행정구명, 중심경도, 중심위도, YEAR
model name = 'EDU_SEOUL_GU_WGS84' model_owner = root spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  > ='201901' YYYYMMDD  < '202001'  )  as q on GU_NAME =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지             by GU_NAME, GEOM, YEAR
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  > ='201901' YYYYMMDD  < '202001'  )  as q on 행정구명 =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM2_5) as 초미세먼지             by 행정구명, 중심경도, 중심위도, YEAR
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo YYYYMMDD >='201901' YYYYMMDD < '202001'
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | where 행정구명  in ( '종로구','중구','용산구' )
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | where 행정구명  in ( '광진구','동대문구','중랑구' )
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo | substr YYYYMMDD 1 4 as YEAR | fields YEAR | distinct YEAR
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo | where YYYYMMDD  >= '20200101' and YYYYMMDD  <=  '20201231' | substr  YYYYMMDD 1 6  as YEAR | sort YEAR |where  LOC in ('성동구','광진구','동대문구') | stats                max(PM10) as 미세먼지,             max(PM2_5)  as 초미세먼지             by  YEAR
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  >='20200101' YYYYMMDD  <= '20201231'  )  as q on 행정구명 =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지,             max(q_PM2_5)  as 초미세먼지             by 행정구명, 중심경도, 중심위도, YEAR |where  행정구명 in ('성동구','광진구','동대문구')
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 | where  행정구명 in ('성동구','광진구','동대문구')
model name = 'EDU_SEOUL_GU_WGS84' model_owner = root spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  > ='201901' YYYYMMDD  < '202001'  )  as q on GU_NAME =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지             by GU_NAME, GEOM, YEAR |where GU_NAME in ('성동구','광진구','동대문구')
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo YYYYMMDD >='20200101' YYYYMMDD <='20201231'
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  >='20200101' YYYYMMDD  <= '20201231'  )  as q on 행정구명 =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지,             max(q_PM2_5)  as 초미세먼지             by 행정구명, 중심경도, 중심위도, YEAR |where  행정구명 in ('성동구','동대문구','성북구','강북구')
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 | where  행정구명 in ('성동구','동대문구','성북구','강북구')
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo | where YYYYMMDD  >= '20200101' and YYYYMMDD  <=  '20201231' | substr  YYYYMMDD 1 6  as YEAR | sort YEAR |where  LOC in ('성동구','동대문구','성북구','강북구') | stats                max(PM10) as 미세먼지,             max(PM2_5)  as 초미세먼지             by  YEAR
model name = 'EDU_SEOUL_GU_WGS84' model_owner = root spatial_coordinates = 'POLYGON((37.814123701604466 126.46636962890626, 37.814123701604466 127.56225585937501, 37.34832607355296 127.56225585937501, 37.34832607355296 126.46636962890626, 37.814123701604466 126.46636962890626))' map_level = 10 |merge (EDU_SEOUL_DAY_AIR_201910_202010  YYYYMMDD  > ='201901' YYYYMMDD  < '202001'  )  as q on GU_NAME =q.LOC |substr q_YYYYMMDD 1 4  as YEAR |stats                max(q_PM10) as 미세먼지             by GU_NAME, GEOM, YEAR |where GU_NAME in ('성동구','동대문구','성북구','강북구')
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | where 행정구명  in ( '성동구','동대문구','중랑구','성북구' )
model name = 'SEOUL_GU_FIRE_CAUSE' model_owner = root
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.4904022216797 37.32503089528544,126.4904022216797 37.793688233022195,127.31712341308595 37.793688233022195,127.31712341308595 37.32503089528544,126.4904022216797 37.32503089528544)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | stats min(`대중교통승객수`) as lower, max(`대중교통승객수`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((120.5200195312502 32.457307122959286,120.5200195312502 40.07796845609345,133.74755859374883 40.07796845609345,133.74755859374883 32.457307122959286,120.5200195312502 32.457307122959286)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((96.88539093539488 17.26866485355269,96.88539093539488 51.96950269907616,156.7745603757097 51.96950269907616,156.7745603757097 17.26866485355269,96.88539093539488 17.26866485355269)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | stats min(`발생건수`) as lower, max(`발생건수`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '3168610082' ,  2775657605 , '84060890.96200001'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when 전사투자  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2540895570' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when 전사투자  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[    'NI개발그룹',   '2540895570' ,  3249007188 , '' ,  13058572 ,   91721587   ]] ['그룹','추정순매출', '연간인건비', '전사투자_연구개발', '받을_인건비', '줄_인건비']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자_연구개발`  =  ''   then 0  otherwise   전사투자_연구개발 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 + 받을_인건비 -  줄_인건비 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,받을_인건비,줄_인건비,전사투자_연구개발,추정이익,이익률  |  typecast 연간인건비 bigint |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint |  typecast 받을_인건비 bigint |  typecast 줄_인건비 bigint
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC
model name = 'EDU_SEOUL_DAY_AIR_201910_202010' model_owner = demo YYYYMMDD=20191019
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.44233703613283 37.37496199127594,126.44233703613283 37.74417193518668,127.36518859863283 37.74417193518668,127.36518859863283 37.37496199127594,126.44233703613283 37.37496199127594)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.44233703613283 37.36733173305739,126.44233703613283 37.75178252983932,127.36518859863283 37.75178252983932,127.36518859863283 37.36733173305739,126.44233703613283 37.36733173305739)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root  | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | where 구군 = '종로구' | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | where 구군 = '종로구'
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2540895570' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2540895570' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2540895570' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발    | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DX개발그룹',   '3879669334' ,  5609660496 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발    | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NX개발그룹',   '4046318928' ,  5508142383 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발    | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '3168610082' ,  2775657605 , '84060890.96200001'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발    | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.54567718505861 37.33146420298375,126.54567718505861 37.78754698833787,127.26184844970705 37.78754698833787,127.26184844970705 37.33146420298375,126.54567718505861 37.33146420298375)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.43615722656298 37.331464202984506,126.43615722656298 37.78754698833819,127.37102508544868 37.78754698833819,127.37102508544868 37.331464202984506,126.43615722656298 37.331464202984506)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join `EDU_IMA_서울시_동별_인구수` as B 읍면동 = B.동
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join `EDU_IMA_서울시_동별_인구수` as B 읍면동 = B.동 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join `EDU_IMA_서울시_동별_인구수` as B `읍면동` = B.동 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join `EDU_IMA_서울시_동별_인구수` as B `읍면동` = B.동
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | count
model name = 'EDU_IMA_서울시_동별_인구수' model_owner = root
model name = 'EDU_IMA_서울시_동별_인구수' model_owner = root  | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.54164552431297 37.268435519711815,126.54164552431297 37.89807179098307,127.37049722098823 37.89807179098307,127.37049722098823 37.268435519711815,126.54164552431297 37.268435519711815)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | stats min(`대중교통승객수`) as lower, max(`대중교통승객수`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((120.7523817810878 35.16857436229323,120.7523817810878 40.76966457710104,132.95395174349193 40.76966457710104,132.95395174349193 35.16857436229323,120.7523817810878 35.16857436229323)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이 | stats min(`대중교통승객수`) as lower, max(`대중교통승객수`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, B_인구높이 AS 높이 | calculate 높이 * 100 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate AS 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate AS 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.11196200193572 37.23413739426152,126.11196200193572 37.985252708583786,127.73955176448837 37.985252708583786,127.73955176448837 37.23413739426152,126.11196200193572 37.23413739426152)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate AS 높이 | stats min(`높이`) as lower, max(`높이`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate AS 높이
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate AS 높이 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.인구높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate as 높이
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.인구높이 * 100 | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate as 높이 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.인구높이 * 100
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B.인구높이 * 100 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100  | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate as 높이
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100  | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculate as 높이 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | count
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.11196200193572 37.23413739426152,126.11196200193572 37.985252708583786,127.73955176448837 37.985252708583786,127.73955176448837 37.23413739426152,126.11196200193572 37.23413739426152)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | stats min(`높이`) as lower, max(`높이`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | stats min(`대중교통승객수`) as lower, max(`대중교통승객수`) as upper
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | geocode codetype=address  SI=`시도` GU=`구군` | rename GEOMETRY `공간 데이터셋 2_GEOMETRY` | where `공간 데이터셋 2_GEOMETRY` != ''
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.32618612583225 37.13504012859533,126.32618612583225 38.498384756091205,128.02770980441454 38.498384756091205,128.02770980441454 37.13504012859533,126.32618612583225 37.13504012859533)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` | rename GEOMETRY `공간 데이터셋 2_GEOMETRY` | where `공간 데이터셋 2_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 2_GEOMETRY` filter=Polygon((126.27781952471949 37.058900865133836,126.27781952471949 38.437226204713554,127.99644379626923 38.437226204713554,127.99644379626923 37.058900865133836,126.27781952471949 37.058900865133836)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 2_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.36004251024762 37.304683985826244,126.36004251024762 37.74947241964772,127.46144142567415 37.74947241964772,127.46144142567415 37.304683985826244,126.36004251024762 37.304683985826244)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | join EDU_IMA_서울시_동별_인구수 as B `읍면동` = B.동 | calculate B_인구높이 * 100   | fields 행정동ID, 시도, 구군, 읍면동, 대중교통승객수, B_인구 AS 인구, calculated as 높이 | geocode codetype=address  SI=`시도` GU=`구군` | rename GEOMETRY `공간 데이터셋 2_GEOMETRY` | where `공간 데이터셋 2_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 2_GEOMETRY` filter=Polygon((126.36004251024762 37.304683985826244,126.36004251024762 37.74947241964772,127.46144142567415 37.74947241964772,127.46144142567415 37.304683985826244,126.36004251024762 37.304683985826244)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 2_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_GU_FIRE_CAUSE' model_owner = root
model name = 'EDU_SEOUL_GU_FIRE_CAUSE' model_owner = root | calculate UNKNOWN/NATURAL as test | fields UNKNOWN,NATURAL, test
model name = 'EDU_SEOUL_GU_FIRE_CAUSE' model_owner = root  | count
model name = 'EDU_SEOUL_GU_FIRE_CAUSE' model_owner = root | fields UNKNOWN,NATURAL  | calculate UNKNOWN/NATURAL as test
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  '', '' , '', '' ,'' ] ] ['추정순매출', '추정비용', '전사투자_연구개발','추정이익','이익률']
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2540895570' ,  3249007188 , '0'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발    | fields 그룹,추정순매출,연간인건비,전사투자_연구개발  |  typecast 전사투자_연구개발 bigint |  typecast 추정순매출 bigint |  typecast 연간인건비 bigint
model name = 'EDU_SEOUL_FIRE_CAUSE' model_owner = root | fields UNKNOWN, NATURAL  | calculate UNKNOWN/NATURAL as test
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  '모비젠',   '15506912216' ,  23980544841  ] ] ['모비젠','추정순매출', '추정비용' ]  | calculate 추정순매출 + 0  as 추정순매출  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,추정이익,이익률  |  typecast 추정비용 bigint  |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC | concat "서울특별시" , "" as  CITY | concat "POINT(",중심경도," ",중심위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.55803680419923 37.32857999795222,126.55803680419923 37.79721508117542,127.38475799560548 37.79721508117542,127.38475799560548 37.32857999795222,126.55803680419923 37.32857999795222)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC | concat "서울특별시" , "" as  CITY | geocode codetype=address  SI=`CITY` GU=`행정구명` | rename GEOMETRY `공간 데이터셋 2_GEOMETRY` | where `공간 데이터셋 2_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 2_GEOMETRY` filter=Polygon((126.55803680419923 37.32857999795222,126.55803680419923 37.79721508117542,127.38475799560548 37.79721508117542,127.38475799560548 37.32857999795222,126.55803680419923 37.32857999795222)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 2_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC | concat "서울특별시" , "" as  CITY | stats min(`AIR_PM2_5`) as lower, max(`AIR_PM2_5`) as upper
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC | concat "서울특별시" , "" as  CITY | stats min(`AIR_PM10`) as lower, max(`AIR_PM10`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [  ['전국'],['서울'],['6개광역시'],['부산'],['대구'],['인천'],['광주'],['대전'],['울산'],['5개광역시'],['수도권'],['세종'],['경기'],['강원'],['충북'],['충남'],['전북'],['전남'],['경북'],['경남'],['제주/서귀포'] ] ['NAME']
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [ ['전국'],['서울'],['강북'],['강북구'],['광진구'],['노원구'],['도봉구'],['동대문구'],['마포구'],['서대문구'],['성동구'],['성북구'],['용산구'],['은평구'],['종로구'],['중구'],['중랑구'],['강남'],['강남구'],['강동구'],['강서구'],['관악구'],['구로구'],['금천구'],['동작구'],['서초구'],['송파구'],['양천구'],['영등포구'],['6개광역시'],['부산'],['중구1'],['서구'],['동구'],['영도구'],['부산진구'],['동래구'],['남구'],['북구'],['해운대구'],['사하구'],['금정구'],['연제구'],['수영구'],['사상구'],['기장군'],['강서구1'],['대구'],['중구2'],['동구1'],['서구1'],['남구1'],['북구1'],['수성구'],['달서구'],['달성군'],['인천'],['중구3'],['동구2'],['미추홀구'],['연수구'],['남동구'],['부평구'],['계양구'],['서구2'],['광주'],['동구3'],['서구3'],['남구2'],['북구2'],['광산구'],['대전'],['동구4'],['중구4'],['서구4'],['유성구'],['대덕구'],['울산'],['중구5'],['남구3'],['동구5'],['북구3'],['울주군'],['5개광역시'],['수도권'],['세종'],['경기'],['수원'],['장안구'],['권선구'],['팔달구'],['영통구'],['성남'],['수정구'],['중원구'],['분당구'],['고양'],['덕양구'],['일산동구'],['일산서구'],['안양'],['만안구'],['동안구'],['부천'],['의정부'],['광명'],['평택'],['안산'],['단원구'],['상록구'],['과천'],['구리'],['남양주'],['용인'],['처인구'],['기흥구'],['수지구'],['시흥'],['군포'],['의왕'],['하남'],['오산'],['파주'],['이천'],['안성'],['김포'],['양주'],['동두천'],['광주1'],['화성'],['강원'],['춘천'],['강릉'],['원주'],['충북'],['청주'],['상당구'],['서원구'],['청원구'],['흥덕구'],['충주'],['제천'],['충남'],['천안'],['동남구 '],['서북구'],['공주'],['아산'],['논산'],['계룡'],['당진'],['서산'],['전북'],['전주'],['완산구'],['덕진구'],['익산'],['군산'],['전남'],['목포'],['순천'],['광양'],['여수'],['경북'],['포항'],['남구4'],['북구4'],['구미'],['경산'],['안동'],['김천'],['경남'],['통합창원'],['마산합포구'],['마산회원구'],['성산구'],['의창구'],['진해구'],['양산'],['거제'],['진주'],['김해'],['통영'],['제주도'],['제주/서귀포'],['기타지방']] ['NAME']
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  '모비젠',   '17131897410' ,  23980544841  ] ] ['모비젠','추정순매출', '추정비용' ]  | calculate 추정순매출 + 0  as 추정순매출  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,추정이익,이익률  |  typecast 추정비용 bigint  |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root
model name = 'Magenta_Cell' model_owner = jins00 | sort +SITE
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = ''
model name = 'Magenta_Log' model_owner = jins00 | where SITE = ''  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = 'AG-020'
model name = 'Magenta_Log' model_owner = jins00 | where SITE = 'AG-020'  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = 'AG-018'
model name = 'Magenta_Log' model_owner = jins00 | where SITE = 'AG-018'  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'EDU_SEOUL_CCTV' model_owner = demo | concat "POINT(",WGS_LON," ",WGS_LAT, ")" as '제대로_GEOMETRY' | where `제대로_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`제대로_GEOMETRY` filter=Polygon((126.48799896239893 37.39054321426653,126.48799896239893 37.71938530970914,127.41085052489814 37.71938530970914,127.41085052489814 37.39054321426653,126.48799896239893 37.39054321426653)) | geoconverter intype=wkt outtype=geojson geocol=`제대로_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_CCTV' model_owner = demo | concat "POINT(",WGS_LAT," ",WGS_LON, ")" as '반대로_GEOMETRY' | where `반대로_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`반대로_GEOMETRY` filter=Polygon((126.48799896239893 37.39054321426653,126.48799896239893 37.71938530970914,127.41085052489814 37.71938530970914,127.41085052489814 37.39054321426653,126.48799896239893 37.39054321426653)) | geoconverter intype=wkt outtype=geojson geocol=`반대로_GEOMETRY` properties=*  keep=True
model name = 'empty_data' model_owner = demo
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = 'Dangjin-si'
model name = 'Magenta_Log' model_owner = jins00 | where SITE = 'Dangjin-si'  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = 'Yongin-si,Gyeonggi-do'
model name = 'Magenta_Log' model_owner = jins00 | where SITE = 'Yongin-si,Gyeonggi-do'  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'Magenta_Cell' model_owner = jins00 | where SITE = 'MG-003'
model name = 'Magenta_Log' model_owner = jins00 | where SITE = 'MG-003'  | fields DATETIME, AZIMUTH, TILT, ROLL | sort - DATETIME
model name = 'EDU_SEOUL_GU_CENTER' model_owner = demo spatial_coordinates = 'POLYGON((37.74031329210266 126.74034118652345, 37.74031329210266 127.27455139160158, 37.38761749978395 127.27455139160158, 37.38761749978395 126.74034118652345, 37.74031329210266 126.74034118652345))' map_level = 11 | merge left_outer (  EDU_SEOUL_DAY_AIR_201910_202010 YYYYMMDD = 20191019 ) as AIR on  행정구명 = AIR.LOC
model name = 'EDU_CHART_SYSLOG_2020_0325_09시' model_owner = demo |   count
model name = 'EDU_CHART_SYSLOG_2020_0325_09시' model_owner = demo
model name = 'EDU_CHART_SYSLOG_2020_0325_09시' model_owner = demo | where  HOST='tsdn-svr1'    |  stats count(*) as CNT    | calculate ( CNT / 37940  ) * 100 as RES    | round 2 col=RES     | fields RES
model name = 'EDU_TEST_FLOWER' model_owner = root |  stats count(*) as CNT by Species
model name = 'EDU_TEST_FLOWER' model_owner = root | stats count(*) as  CNT by Species
model name = 'EDU_TEST_FLOWER' model_owner = root |  where Species in ( 'setosa', 'virginica')  | stats count(*) as  CNT by Species | distinct Species
model name = 'EDU_TEST_FLOWER' model_owner = root |  where Species like 's%'     | stats count(*) as CNT by Species
model name = 'EDU_TEST_FLOWER' model_owner = root |  where Species like 'v%' |  distinct Species
model name = 'EDU_TEST_FLOWER' model_owner = root |  where Species in ( 'setosa','virginica')
model name = 'EDU_SEOUL_CCTV' model_owner = demo
model name = 'EDU_SEOUL_CCTV' model_owner = demo  | count
model name = 'EDU_TEST_FLOWER' model_owner = root
model name = 'EDU_TEST_FLOWER' model_owner = root  | count
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '3168610082' ,  2775657605 , '84060890.96200001'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NX개발그룹',   '4175818928' ,  5508142383 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '2146301273' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DX개발그룹',   '3804669334' ,  5609660496 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'IOP개발그룹',   '2484996891' ,  4952100499 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  '연구소',   '1004585595' ,  1592128891 , '10756915.211'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI솔루션기획실',   '' ,  293847779 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EDU_SEOUL_CCTV' model_owner = demo | concat "POINT(",WGS_LON," ",WGS_LAT, ")" as '제대로_GEOMETRY' | where `제대로_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`제대로_GEOMETRY` filter=Polygon((126.61441040039064 37.43974510379261,126.61441040039064 37.670277544940134,127.28443908691408 37.670277544940134,127.28443908691408 37.43974510379261,126.61441040039064 37.43974510379261)) | geoconverter intype=wkt outtype=geojson geocol=`제대로_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_CCTV' model_owner = demo | concat "POINT(",WGS_LAT," ",WGS_LON, ")" as '반대로_GEOMETRY' | where `반대로_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`반대로_GEOMETRY` filter=Polygon((126.61441040039064 37.43974510379261,126.61441040039064 37.670277544940134,127.28443908691408 37.670277544940134,127.28443908691408 37.43974510379261,126.61441040039064 37.43974510379261)) | geoconverter intype=wkt outtype=geojson geocol=`반대로_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_CCTV' model_owner = demo | concat "POINT(",WGS_LON," ",WGS_LAT, ")" as '제대로_GEOMETRY' | where `제대로_GEOMETRY` != '' | concat "POINT(",WGS_LAT," ",WGS_LON, ")" as '반대로_GEOMETRY' | where `반대로_GEOMETRY` != ''
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NX개발그룹',   '4175818929' ,  5508142383 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [['1','개별시스템별']] ['NO','체크박스']  | where NO = '2'
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [  ['-1','전체'],         ['0','관제센터'],['5','5호선'],['6','6호선'],['7','7호선'],['8','8호선']  ] ['ID','NAME']  | sort ID
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((97.19876449641819 17.26866485355145,97.19876449641819 51.96950269907534,156.4611868146837 51.96950269907534,156.4611868146837 17.26866485355145,97.19876449641819 17.26866485355145)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((97.1987644964181 18.413976685884894,97.1987644964181 51.04229324055407,156.46118681468266 51.04229324055407,156.46118681468266 18.413976685884894,97.1987644964181 18.413976685884894)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != ''
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((109.91663052408083 32.19557624648179,109.91663052408083 52.19242139357564,140.97056961883246 52.19242139357564,140.97056961883246 32.19557624648179,109.91663052408083 32.19557624648179)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((122.062313556347 35.63658166424275,122.062313556347 41.72193855944749,130.97404313653945 41.72193855944749,130.97404313653945 35.63658166424275,122.062313556347 35.63658166424275)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = '대검찰청_2018_지역별범죄_simple_10.9' model_owner = demo | concat G_COOR as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=geometry op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((114.72936760929045 31.16372127568197,114.72936760929045 47.123503875591496,138.33310775031154 47.123503875591496,138.33310775031154 31.16372127568197,114.72936760929045 31.16372127568197)) | geoconverter intype=geometry outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=* ex_properties=G_COOR keep=True
model name = 'EMPTY_DATA_MODEL' model_owner = root  | count
model name = 'EMPTY_DATA_MODEL' model_owner = root |mkdata [ ['2022', '05', '30', '16', '50', '0' ] ] ['YEAR','MONTH', 'DAY', 'HOUR', 'MIN', 'SEC'] | concat  "0", DAY as DAYS | case when DAY < 10 then DAYS otherwise DAY as DAY | concat "0", HOUR as HOURS | case when HOUR < 10 then HOURS otherwise HOUR as HOUR | concat "0", MIN as MINS | case when MIN < 10 then MINS otherwise MIN as MIN | concat "0", SEC as SECS | case when SEC < 10 then SECS otherwise SEC as SEC | fields YEAR, MONTH, DAY, HOUR, MIN, SEC
model name = 'EMPTY_DATA_MODEL' model_owner = root |mkdata [ ['2022', '05', '30', '16', '50', '0' ] ] ['YEAR','MONTH', 'DAY', 'HOUR', 'MIN', 'SEC'] | concat  "0", DAY as DAYS | case when DAY < 10 then DAYS otherwise DAY as DAY | concat "0", HOUR as HOURS | case when HOUR < 10 then HOURS otherwise HOUR as HOUR | concat "0", MIN as MINS | case when MIN < 10 then MINS otherwise MIN as MIN | concat "0", SEC as SECS | case when SEC < 10 then SECS otherwise SEC as SEC | fields YEAR, MONTH, DAY, HOUR, MIN, SEC | count
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [[1, '서울특별시', ''], [2, '인천광역시', '']] ['ID', 'REGION', 'CITY'] | geocode codetype=address  SI=`REGION` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.87420654296876 37.09753315037168,125.87420654296876 38.03475374960313,127.51034545898439 38.03475374960313,127.51034545898439 37.09753315037168,125.87420654296876 37.09753315037168)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | where 노선번호 in ( '303', '555', '5', '593', '1000', '무의1') |  calculate 노선ID - 165000000 as LINE_ID | concat "POINT(",LON," ",LAT, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.87420654296876 37.09753315037168,125.87420654296876 38.03475374960313,127.51034545898439 38.03475374960313,127.51034545898439 37.09753315037168,125.87420654296876 37.09753315037168)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | where 노선번호 in ( '700-1', '1500', '9500', '700-1') |  calculate 노선ID - 165000000 as LINE_ID | where 노선번호 = '700-1' | concat "POINT(",LON," ",LAT, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.87420654296876 37.09753315037168,125.87420654296876 38.03475374960313,127.51034545898439 38.03475374960313,127.51034545898439 37.09753315037168,125.87420654296876 37.09753315037168)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | where 노선번호 in ( '700-1', '1500', '9500', '700-1') |  calculate 노선ID - 165000000 as LINE_ID | where 노선번호 = '700-1' | stats min(`LINE_ID`) as lower, max(`LINE_ID`) as upper
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | where 노선번호 in ( '303', '555', '5', '593', '1000', '무의1') |  calculate 노선ID - 165000000 as LINE_ID | stats min(`LINE_ID`) as lower, max(`LINE_ID`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [[1, '서울특별시', ''], [2, '인천광역시', '']] ['ID', 'REGION', 'CITY'] | stats min(`ID`) as lower, max(`ID`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '2695598082' ,  2775657605 , '84060890.96200001'  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EDU_SEOUL_POP_FIRECENTER_2018' model_owner = demo | where GU_NAME != '서울특별시' |  concat "서울특별시" , "" as CITY | geocode codetype=address  SI=`CITY` GU=`GU_NAME` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.08116149902345 37.08876383952882,126.08116149902345 38.02230759866683,127.85476684570314 38.02230759866683,127.85476684570314 37.08876383952882,126.08116149902345 37.08876383952882)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_SEOUL_POP_FIRECENTER_2018' model_owner = demo
model name = 'EDU_SEOUL_POP_FIRECENTER_2018' model_owner = demo | where GU_NAME != '서울특별시' |  concat "서울특별시" , "" as CITY | stats min(`Pop`) as lower, max(`Pop`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [[1, '05854', 'zip_05854'], [2, '05855', 'zip_05855'] , [3, '05836', 'zip_05836'], [4, '05835', 'zip_05835']]  ['ID', '우편번호', 'zip_name'] | where ID != 4 | geocode codetype=code ZIPCODE=우편번호 | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((127.08894252777101 37.472423561866115,127.08894252777101 37.50162396409424,127.14436769485474 37.50162396409424,127.14436769485474 37.472423561866115,127.08894252777101 37.472423561866115)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [[1, '05854', 'zip_05854'], [2, '05855', 'zip_05855'] , [3, '05836', 'zip_05836'], [4, '05835', 'zip_05835']]  ['ID', '우편번호', 'zip_name'] | where ID != 4 | stats min(`ID`) as lower, max(`ID`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata [[1, '서울특별시' , '송파구', '문정동', '', '', '' , '지번주소'] ] ['ID', '시도',' 시군구', '읍면동', '리', '지번', '타입'] | stats min(`ID`) as lower, max(`ID`) as upper
model name = 'EDU_SEOUL_GU_FIRE_CAUSE' model_owner = root | where YEAR = 2018 | concat "서울특별시" , "" as SIDO | geocode codetype=address  SI=`SIDO` GU=`GU_NAME` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.51855468750001 37.33158148947778,126.51855468750001 37.798298766955504,127.40535736083986 37.798298766955504,127.40535736083986 37.33158148947778,126.51855468750001 37.33158148947778)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_전국휴양림현황' model_owner = root | concat "POINT(",경도," ",위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.50369262695314 35.62217561149997,125.50369262695314 37.51366050651316,129.05090332031253 37.51366050651316,129.05090332031253 35.62217561149997,125.50369262695314 35.62217561149997)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.009085 35.456126,126.009085 38.103883,128.855982 38.103883,128.855982 35.456126,126.009085 35.456126)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_전국휴양림현황' model_owner = root | concat "POINT(",경도," ",위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | stats min(`휴양림면적`) as lower, max(`휴양림면적`) as upper
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '2695598082' ,  2775657605 , '84060890.96200001' ,  254007327 ] ] ['그룹','추정순매출', '연간인건비', '전사투자', '타그룹_받을인건비']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,타그룹_받을인건비,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint |  typecast 타그룹_받을인건비 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'DV개발그룹',   '2695598082' ,  2775657605 , '84060890.96200001' ,  254007327 ] ] ['그룹','추정순매출', '연간인건비', '전사투자', '타그룹_받을인건비']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,타그룹_받을인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint |  typecast 타그룹_받을인건비 bigint
model name = 'IMA_전국휴양림현황' model_owner = root | concat "POINT(",경도," ",위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((123.75274658203125 34.82959597985923,123.75274658203125 38.604691746578034,130.84716796875003 38.604691746578034,130.84716796875003 34.82959597985923,123.75274658203125 34.82959597985923)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_전국휴양림현황' model_owner = root | stats min(`휴양림면적`) as lower, max(`휴양림면적`) as upper
model name = 'IMA_전국휴양림현황' model_owner = root | concat "POINT(",경도," ",위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((123.84613037109376 34.98055114421786,123.84613037109376 38.748393103306995,130.94055175781253 38.748393103306995,130.94055175781253 34.98055114421786,123.84613037109376 34.98055114421786)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.287842 36.901587,126.090088 36.202174,126.773987 35.837855,128.221436 35.806677,128.567505 36.261992,127.817688 36.804887,127.032166 37.074902,126.952515 37.5424,127.122803 37.635985,127.765503 37.057369,127.216187 36.870832,126.287842 36.901587)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_전국휴양림현황' model_owner = root | concat "POINT(",경도," ",위도, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((119.27856445312501 32.43837590689832,119.27856445312501 40.031296220939645,133.46740722656253 40.031296220939645,133.46740722656253 32.43837590689832,119.27856445312501 32.43837590689832)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_상가업소정보' model_owner = root | rename 상권업종대분류코드 A | case when A = 'R' then 1 when A = 'D' then 2 when A = 'Q' then 3 when A = 'F' then 4 when A = 'L' then 5 when A ='N' then 6 otherwise 7 | geocode codetype=code ZIPCODE=신우편번호 | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((114.06005859375001 28.138494023859177,114.06005859375001 43.38094988675,142.43774414062503 43.38094988675,142.43774414062503 28.138494023859177,114.06005859375001 28.138494023859177)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.830978 37.581045,126.909599 37.534777,126.926765 37.533143,126.943932 37.519529,126.982727 37.505641,127.026672 37.533688,127.066841 37.519257,127.083664 37.517351,127.120743 37.549749,127.160912 37.572066,127.196274 37.527698,127.120399 37.470226,127.035942 37.458508,126.927452 37.456601,126.907196 37.437521,126.87973 37.456055,126.87458 37.496108,126.825485 37.520619,126.803169 37.558459,126.830978 37.581045)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'IMA_상가업소정보' model_owner = root | rename 상권업종대분류코드 A | case when A = 'R' then 1 when A = 'D' then 2 when A = 'Q' then 3 when A = 'F' then 4 when A = 'L' then 5 when A ='N' then 6 otherwise 7 | geocode codetype=code ZIPCODE=신우편번호 | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | stats min(`result`) as lower, max(`result`) as upper
model name = 'IMA_상가업소정보' model_owner = root | rename 상권업종대분류코드 A | case when A = 'R' then 1 when A = 'D' then 2 when A = 'Q' then 3 when A = 'F' then 4 when A = 'L' then 5 when A ='N' then 6 otherwise 7 | geocode codetype=code ZIPCODE=신우편번호 | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.70377731323244 37.381251474242525,126.70377731323244 37.61482007592395,127.14717864990236 37.61482007592395,127.14717864990236 37.381251474242525,126.70377731323244 37.381251474242525)) | georelation intype=wkt op=Contains geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.830978 37.581045,126.909599 37.534777,126.926765 37.533143,126.943932 37.519529,126.982727 37.505641,127.026672 37.533688,127.066841 37.519257,127.083664 37.517351,127.120743 37.549749,127.160912 37.572066,127.196274 37.527698,127.120399 37.470226,127.035942 37.458508,126.927452 37.456601,126.907196 37.437521,126.87973 37.456055,126.87458 37.496108,126.825485 37.520619,126.803169 37.558459,126.830978 37.581045)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[ '','','','']]  [  '추정순매출', '추정비용','추정이익','이익률' ]
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  '모비젠',   '16455003624' ,  23980544841  ] ] ['모비젠','추정순매출', '추정비용' ]  | calculate 추정순매출 + 0  as 추정순매출  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,추정이익,이익률  |  typecast 추정비용 bigint  |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NI개발그룹',   '1796301273' ,  3249007188 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EMPTY_DATA_MODEL' model_owner = root | mkdata  [[  'NX개발그룹',   '4236318929' ,  5508142383 , ''  ] ] ['그룹','추정순매출', '연간인건비', '전사투자']  | calculate 추정순매출 + 0  as 추정순매출 | case when `전사투자`  =  ''   then 0  otherwise   전사투자 as     전사투자_연구개발   | calculate  연간인건비 -  전사투자_연구개발 as 추정비용  | calculate 추정순매출  - 추정비용  as 추정이익 | calculate 추정이익 / 추정순매출 * 100  as 이익률   | fields 그룹,추정순매출,추정비용,연간인건비,전사투자_연구개발,추정이익,이익률  |  typecast 추정비용 bigint |  typecast 전사투자_연구개발 bigint |  typecast 추정이익 bigint |  typecast 추정순매출 bigint
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((114.45776367187501 28.592474227416123,114.45776367187501 42.9767044432056,142.05102539062503 42.9767044432056,142.05102539062503 28.592474227416123,114.45776367187501 28.592474227416123)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((108.55810546875001 29.87212698890808,108.55810546875001 44.04073931001161,136.15136718750003 44.04073931001161,136.15136718750003 29.87212698890808,108.55810546875001 29.87212698890808)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_IMA_서울시_행정구역별_대중교통승객수' model_owner = root | geocode codetype=address  SI=`시도` GU=`구군` DONG=`읍면동` | rename GEOMETRY `공간 데이터셋 1_GEOMETRY` | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.76338195800783 37.06063561824958,125.76338195800783 37.94223645724435,127.4879608154297 37.94223645724435,127.4879608154297 37.06063561824958,125.76338195800783 37.06063561824958)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | distinct 노선번호 | sort 노선번호
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | concat "POINT(",LON," ",LAT, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((125.81336975097658 37.25197169179344,125.81336975097658 37.88059836427958,127.42835998535158 37.88059836427958,127.42835998535158 37.25197169179344,125.81336975097658 37.25197169179344)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | concat "POINT(",LON," ",LAT, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != ''
model name = 'EDU_INCHEON_BUS_COOR' model_owner = demo | where  노선번호 = '103' | concat "POINT(",LON," ",LAT, ")" as '공간 데이터셋 1_GEOMETRY' | where `공간 데이터셋 1_GEOMETRY` != '' | georelation intype=wkt op=Intersects geocol=`공간 데이터셋 1_GEOMETRY` filter=Polygon((126.07662963867189 37.26530896446732,126.07662963867189 37.89609938029748,127.02639770507814 37.89609938029748,127.02639770507814 37.26530896446732,126.07662963867189 37.26530896446732)) | geoconverter intype=wkt outtype=geojson geocol=`공간 데이터셋 1_GEOMETRY` properties=*  keep=True
